/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => LinkKeeperPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var LinkKeeperPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.activeTask = Promise.resolve();
    this.failedTasks = [];
  }
  async onload() {
    this.registerEvent(this.app.vault.on("create", (newFile) => {
      const eventRef = this.app.vault.on("delete", async (oldFile) => {
        var _a;
        if (oldFile instanceof import_obsidian.TFile && newFile instanceof import_obsidian.TFile || oldFile instanceof import_obsidian.TFolder && newFile instanceof import_obsidian.TFolder) {
          const oldPath = oldFile.path;
          const newPath = newFile.path;
          const oldParent = (0, import_obsidian.normalizePath)(oldPath.split("/").slice(0, -1).join("/"));
          const newParent = (_a = newFile.parent) == null ? void 0 : _a.path;
          if (oldFile.name === newFile.name || oldParent === newParent) {
            this.app.vault.offref(eventRef);
            const previousTask = this.activeTask;
            const task = async () => {
              await this.app.vault.rename(newFile, oldFile.path);
              await this.app.fileManager.renameFile(newFile, newPath);
            };
            this.activeTask = (async () => {
              await previousTask;
              try {
                await task();
                const retryFailedTasks = [];
                while (this.failedTasks.length) {
                  const failedTask = this.failedTasks.shift();
                  if (!failedTask)
                    continue;
                  try {
                    await failedTask();
                  } catch (e) {
                    retryFailedTasks.push(failedTask);
                  }
                }
                this.failedTasks.push(...retryFailedTasks);
              } catch (e) {
                this.failedTasks.push(task);
              }
            })();
          }
        }
      });
      window.setTimeout(() => {
        this.app.vault.offref(eventRef);
      }, 500);
    }));
  }
};
