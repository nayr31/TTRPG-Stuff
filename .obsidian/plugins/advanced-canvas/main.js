/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AdvancedCanvasPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian7 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var SLIDE_SIZE_OPTIONS = {
  "1200x675": "16:9",
  "1350x900": "3:2"
};
var DEFAULT_SETTINGS = {
  shapesFeatureEnabled: true,
  edgesStylingFeatureEnabled: true,
  edgeStylePathfinderGridResolution: 10,
  edgeStylePathfinderPathLiveUpdate: true,
  edgeStylePathfinderPathRounded: false,
  commandsFeatureEnabled: true,
  zoomToClonedNode: true,
  cloneNodeMargin: 25,
  expandNodeStepSize: 25,
  betterReadonlyEnabled: true,
  disableNodePopup: false,
  disableZoom: false,
  disablePan: false,
  stickersFeatureEnabled: true,
  presentationFeatureEnabled: true,
  defaultSlideSize: Object.keys(SLIDE_SIZE_OPTIONS).first(),
  useArrowKeysToChangeSlides: true,
  zoomToSlideWithoutPadding: true,
  slideTransitionAnimationDuration: 0.5,
  slideTransitionAnimationIntensity: 1.25,
  canvasEncapsulationEnabled: true,
  portalsFeatureEnabled: true,
  maintainClosedPortalSize: true,
  showEdgesIntoDisabledPortals: true
};
var AdvancedCanvasSettingsManager = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.plugin.loadData());
  }
  async saveSettings() {
    await this.plugin.saveData(this.settings);
  }
  getSetting(key) {
    return this.settings[key];
  }
  async setSetting(data) {
    this.settings = Object.assign(this.settings, data);
    await this.saveSettings();
  }
  addSettingsTab() {
    this.settingsTab = new AdvancedCanvasPluginSettingTab(this.plugin, this);
    this.plugin.addSettingTab(this.settingsTab);
  }
};
var AdvancedCanvasPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(plugin, settingsManager) {
    super(plugin.app, plugin);
    this.settingsManager = settingsManager;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    this.createFeatureHeading(
      containerEl,
      "Shapes",
      "Shape your nodes for creating e.g. mind maps or flow charts.",
      "shapesFeatureEnabled"
    );
    this.createFeatureHeading(
      containerEl,
      "Edges styling",
      "Style your edges with different path styles.",
      "edgesStylingFeatureEnabled"
    );
    new import_obsidian.Setting(containerEl).setName("A* grid resolution").setDesc("The resolution of the grid when using the A* path style. The lower the value, the more precise the path will be. But it will also take longer to calculate.").addText(
      (text) => text.setValue(this.settingsManager.getSetting("edgeStylePathfinderGridResolution").toString()).onChange(async (value) => await this.settingsManager.setSetting({ edgeStylePathfinderGridResolution: Math.max(5, parseInt(value)) }))
    );
    new import_obsidian.Setting(containerEl).setName("Live update A* path").setDesc("When enabled, the A* path style will be updated live while dragging the edge.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSetting("edgeStylePathfinderPathLiveUpdate")).onChange(async (value) => await this.settingsManager.setSetting({ edgeStylePathfinderPathLiveUpdate: value }))
    );
    new import_obsidian.Setting(containerEl).setName("A* rounded path").setDesc("When enabled, the A* path style will be rounded.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSetting("edgeStylePathfinderPathRounded")).onChange(async (value) => await this.settingsManager.setSetting({ edgeStylePathfinderPathRounded: value }))
    );
    this.createFeatureHeading(
      containerEl,
      "Extended commands",
      "Add more commands to the canvas.",
      "commandsFeatureEnabled"
    );
    new import_obsidian.Setting(containerEl).setName("Zoom to cloned node").setDesc("When enabled, the canvas will zoom to the cloned node.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSetting("zoomToClonedNode")).onChange(async (value) => await this.settingsManager.setSetting({ zoomToClonedNode: value }))
    );
    new import_obsidian.Setting(containerEl).setName("Clone node margin").setDesc("The margin between the cloned node and the source node.").addText(
      (text) => text.setValue(this.settingsManager.getSetting("cloneNodeMargin").toString()).onChange(async (value) => await this.settingsManager.setSetting({ cloneNodeMargin: parseInt(value) }))
    );
    new import_obsidian.Setting(containerEl).setName("Expand node step size").setDesc("The step size for expanding the node.").addText(
      (text) => text.setValue(this.settingsManager.getSetting("expandNodeStepSize").toString()).onChange(async (value) => await this.settingsManager.setSetting({ expandNodeStepSize: parseInt(value) }))
    );
    this.createFeatureHeading(
      containerEl,
      "Better readonly",
      "Improve the readonly mode.",
      "betterReadonlyEnabled"
    );
    this.createFeatureHeading(
      containerEl,
      "Stickers",
      "Convert an image node to a sticker by supporting transparency and removing the border.",
      "stickersFeatureEnabled"
    );
    this.createFeatureHeading(
      containerEl,
      "Presentations",
      "Create a presentation from your canvas.",
      "presentationFeatureEnabled"
    );
    new import_obsidian.Setting(containerEl).setName("Default slide ratio").setDesc("The default ratio of the slide.").addDropdown(
      (dropdown) => dropdown.addOptions(SLIDE_SIZE_OPTIONS).setValue(this.settingsManager.getSetting("defaultSlideSize")).onChange(async (value) => await this.settingsManager.setSetting({ defaultSlideSize: value }))
    );
    new import_obsidian.Setting(containerEl).setName("Use arrow keys to change slides").setDesc("When enabled, you can use the arrow keys to change slides in presentation mode.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSetting("useArrowKeysToChangeSlides")).onChange(async (value) => await this.settingsManager.setSetting({ useArrowKeysToChangeSlides: value }))
    );
    new import_obsidian.Setting(containerEl).setName("Zoom to slide without padding").setDesc("When enabled, the canvas will zoom to the slide without padding.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSetting("zoomToSlideWithoutPadding")).onChange(async (value) => await this.settingsManager.setSetting({ zoomToSlideWithoutPadding: value }))
    );
    new import_obsidian.Setting(containerEl).setName("Slide transition animation duration").setDesc("The duration of the slide transition animation in seconds. Set to 0 to disable the animation.").addText(
      (text) => text.setValue(this.settingsManager.getSetting("slideTransitionAnimationDuration").toString()).onChange(async (value) => await this.settingsManager.setSetting({ slideTransitionAnimationDuration: parseFloat(value) }))
    );
    new import_obsidian.Setting(containerEl).setName("Slide transition animation intensity").setDesc("The intensity of the slide transition animation. The higher the value, the more the canvas will zoom out before zooming in on the next slide.").addText(
      (text) => text.setValue(this.settingsManager.getSetting("slideTransitionAnimationIntensity").toString()).onChange(async (value) => await this.settingsManager.setSetting({ slideTransitionAnimationIntensity: parseFloat(value) }))
    );
    this.createFeatureHeading(
      containerEl,
      "Canvas encapsulation",
      "Encapsulate a selection of nodes and edges into a new canvas.",
      "canvasEncapsulationEnabled"
    );
    this.createFeatureHeading(
      containerEl,
      "Portals",
      "Create portals to other canvases.",
      "portalsFeatureEnabled"
    );
    new import_obsidian.Setting(containerEl).setName("Maintain closed portal size").setDesc("When enabled, closing a portal will change the size of the portal to the original, closed size.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSetting("maintainClosedPortalSize")).onChange(async (value) => await this.settingsManager.setSetting({ maintainClosedPortalSize: value }))
    );
    new import_obsidian.Setting(containerEl).setName("Show edges into disabled portals").setDesc("When enabled, edges into disabled portals will be shown by an edge to the portal node.").addToggle(
      (toggle) => toggle.setValue(this.settingsManager.getSetting("showEdgesIntoDisabledPortals")).onChange(async (value) => await this.settingsManager.setSetting({ showEdgesIntoDisabledPortals: value }))
    );
  }
  createFeatureHeading(containerEl, label, description, settingsKey) {
    return new import_obsidian.Setting(containerEl).setHeading().setName(label).setDesc(description).addToggle(
      (toggle) => toggle.setTooltip("Requires a reload to take effect.").setValue(this.settingsManager.getSetting(settingsKey)).onChange(async (value) => {
        await this.settingsManager.setSetting({ [settingsKey]: value });
        new import_obsidian.Notice("Reload obsidian to apply the changes.");
      })
    );
  }
};

// src/utils/canvas-helper.ts
var import_obsidian2 = require("obsidian");

// src/utils/bbox-helper.ts
function scaleBBox(bbox, scale) {
  let diffX = (scale - 1) * (bbox.maxX - bbox.minX);
  let diffY = (scale - 1) * (bbox.maxY - bbox.minY);
  return {
    minX: bbox.minX - diffX / 2,
    maxX: bbox.maxX + diffX / 2,
    minY: bbox.minY - diffY / 2,
    maxY: bbox.maxY + diffY / 2
  };
}
function insideBBox(position, bbox, canTouchEdge) {
  const providedBBox = {
    minX: position.minX || position.x,
    minY: position.minY || position.y,
    maxX: position.maxX || position.x,
    maxY: position.maxY || position.y
  };
  return canTouchEdge ? providedBBox.minX >= bbox.minX && providedBBox.maxX <= bbox.maxX && providedBBox.minY >= bbox.minY && providedBBox.maxY <= bbox.maxY : providedBBox.minX > bbox.minX && providedBBox.maxX < bbox.maxX && providedBBox.minY > bbox.minY && providedBBox.maxY < bbox.maxY;
}
function getCenterOfBBoxSide(bbox, side) {
  switch (side) {
    case "top":
      return { x: (bbox.minX + bbox.maxX) / 2, y: bbox.minY };
    case "right":
      return { x: bbox.maxX, y: (bbox.minY + bbox.maxY) / 2 };
    case "bottom":
      return { x: (bbox.minX + bbox.maxX) / 2, y: bbox.maxY };
    case "left":
      return { x: bbox.minX, y: (bbox.minY + bbox.maxY) / 2 };
  }
}

// src/utils/canvas-helper.ts
function canvasCommand(plugin, check, run) {
  return (checking) => {
    const canvas = plugin.getCurrentCanvas();
    if (checking)
      return canvas !== null && check(canvas);
    if (canvas)
      run(canvas);
    return true;
  };
}
function createQuickSettingsButton(menuOption) {
  const quickSetting = document.createElement("div");
  if (menuOption.id)
    quickSetting.id = menuOption.id;
  quickSetting.classList.add("canvas-control-item");
  (0, import_obsidian2.setIcon)(quickSetting, menuOption.icon);
  (0, import_obsidian2.setTooltip)(quickSetting, menuOption.label, { placement: "left" });
  quickSetting.addEventListener("click", () => {
    var _a;
    return (_a = menuOption.callback) == null ? void 0 : _a.call(menuOption);
  });
  return quickSetting;
}
function addQuickSettingsButton(controlGroup, element) {
  var _a;
  if (element.id)
    (_a = controlGroup.querySelector(`#${element.id}`)) == null ? void 0 : _a.remove();
  controlGroup.appendChild(element);
}
function createCardMenuOption(canvas, menuOption, previewNodeSize, onPlaced) {
  const menuOptionElement = document.createElement("div");
  if (menuOption.id)
    menuOptionElement.id = menuOption.id;
  menuOptionElement.classList.add("canvas-card-menu-button");
  menuOptionElement.classList.add("mod-draggable");
  (0, import_obsidian2.setIcon)(menuOptionElement, menuOption.icon);
  (0, import_obsidian2.setTooltip)(menuOptionElement, menuOption.label, { placement: "top" });
  menuOptionElement.addEventListener("click", (_e) => {
    onPlaced(canvas, getCenterCoordinates(canvas, previewNodeSize()));
  });
  menuOptionElement.addEventListener("pointerdown", (e) => {
    canvas.dragTempNode(e, previewNodeSize(), (pos) => {
      canvas.deselectAll();
      onPlaced(canvas, pos);
    });
  });
  return menuOptionElement;
}
function addCardMenuOption(canvas, element) {
  var _a;
  if (element.id)
    (_a = canvas == null ? void 0 : canvas.cardMenuEl.querySelector(`#${element.id}`)) == null ? void 0 : _a.remove();
  canvas == null ? void 0 : canvas.cardMenuEl.appendChild(element);
}
function createPopupMenuOption(menuOption) {
  const menuOptionElement = document.createElement("button");
  if (menuOption.id)
    menuOptionElement.id = menuOption.id;
  menuOptionElement.classList.add("clickable-icon");
  (0, import_obsidian2.setIcon)(menuOptionElement, menuOption.icon);
  (0, import_obsidian2.setTooltip)(menuOptionElement, menuOption.label, { placement: "top" });
  menuOptionElement.addEventListener("click", () => {
    var _a;
    return (_a = menuOption.callback) == null ? void 0 : _a.call(menuOption);
  });
  return menuOptionElement;
}
function createExpandablePopupMenuOption(menuOption, subMenuOptions) {
  const menuOptionElement = createPopupMenuOption({
    ...menuOption,
    callback: () => {
      var _a, _b, _c;
      const submenuId = `${menuOption.id}-submenu`;
      if (menuOptionElement.classList.contains("is-active")) {
        menuOptionElement.classList.remove("is-active");
        (_b = (_a = menuOptionElement.parentElement) == null ? void 0 : _a.querySelector(`#${submenuId}`)) == null ? void 0 : _b.remove();
        return;
      }
      menuOptionElement.classList.add("is-active");
      const submenu = document.createElement("div");
      submenu.id = submenuId;
      submenu.classList.add("canvas-submenu");
      for (const subMenuOption of subMenuOptions) {
        const subMenuOptionElement = createPopupMenuOption(subMenuOption);
        submenu.appendChild(subMenuOptionElement);
      }
      (_c = menuOptionElement.parentElement) == null ? void 0 : _c.appendChild(submenu);
    }
  });
  return menuOptionElement;
}
function addPopupMenuOption(canvas, element, index = -1) {
  var _a, _b;
  const popupMenuEl = (_a = canvas == null ? void 0 : canvas.menu) == null ? void 0 : _a.menuEl;
  if (!popupMenuEl)
    return;
  if (element.id)
    (_b = popupMenuEl.querySelector(`#${element.id}`)) == null ? void 0 : _b.remove();
  const sisterElement = index >= 0 ? popupMenuEl.children[index] : popupMenuEl.children[popupMenuEl.children.length + index];
  popupMenuEl.insertAfter(element, sisterElement);
}
function getCenterCoordinates(canvas, nodeSize) {
  const viewBounds = canvas.getViewportBBox();
  return {
    x: (viewBounds.minX + viewBounds.maxX) / 2 - nodeSize.width / 2,
    y: (viewBounds.minY + viewBounds.maxY) / 2 - nodeSize.height / 2
  };
}
function getBBox(canvasNodes) {
  let minX = Infinity;
  let minY = Infinity;
  let maxX = -Infinity;
  let maxY = -Infinity;
  for (const node of canvasNodes) {
    const nodeData = node.getData ? node.getData() : node;
    minX = Math.min(minX, nodeData.x);
    minY = Math.min(minY, nodeData.y);
    maxX = Math.max(maxX, nodeData.x + nodeData.width);
    maxY = Math.max(maxY, nodeData.y + nodeData.height);
  }
  return { minX, minY, maxX, maxY };
}
function zoomToBBox(canvas, bbox) {
  const PADDING_CORRECTION_FACTOR = 1 / 1.1;
  const zoomedBBox = scaleBBox(bbox, PADDING_CORRECTION_FACTOR);
  canvas.zoomToBbox(zoomedBBox);
  const scaleFactor = Math.min(
    canvas.canvasRect.width / (bbox.maxX - bbox.minX),
    canvas.canvasRect.height / (bbox.maxY - bbox.minY)
  );
  canvas.tZoom = Math.log2(scaleFactor);
}

// src/events/events.ts
var PLUGIN_EVENT_PREFIX = "advanced-canvas";
var CanvasEvent = {
  CanvasChanged: `${PLUGIN_EVENT_PREFIX}:canvas-changed`,
  ViewportChanged: {
    Before: `${PLUGIN_EVENT_PREFIX}:viewport-changed:before`,
    After: `${PLUGIN_EVENT_PREFIX}:viewport-changed:after`
  },
  NodeMoved: `${PLUGIN_EVENT_PREFIX}:node-moved`,
  DraggingStateChanged: `${PLUGIN_EVENT_PREFIX}:dragging-state-changed`,
  NodeAdded: `${PLUGIN_EVENT_PREFIX}:node-added`,
  EdgeAdded: `${PLUGIN_EVENT_PREFIX}:edge-added`,
  NodeRemoved: `${PLUGIN_EVENT_PREFIX}:node-removed`,
  EdgeRemoved: `${PLUGIN_EVENT_PREFIX}:edge-removed`,
  NodeChanged: `${PLUGIN_EVENT_PREFIX}:node-changed`,
  EdgeChanged: `${PLUGIN_EVENT_PREFIX}:edge-changed`,
  EdgeCenterRequested: `${PLUGIN_EVENT_PREFIX}:edge-center-requested`,
  SelectionChanged: `${PLUGIN_EVENT_PREFIX}:selection-changed`,
  ZoomToBbox: {
    Before: `${PLUGIN_EVENT_PREFIX}:zoom-to-bbox:before`,
    After: `${PLUGIN_EVENT_PREFIX}:zoom-to-bbox:after`
  },
  PopupMenuCreated: `${PLUGIN_EVENT_PREFIX}:popup-menu-created`,
  NodeInteraction: `${PLUGIN_EVENT_PREFIX}:node-interaction`,
  Undo: `${PLUGIN_EVENT_PREFIX}:undo`,
  Redo: `${PLUGIN_EVENT_PREFIX}:redo`,
  ReadonlyChanged: `${PLUGIN_EVENT_PREFIX}:readonly-changed`,
  DataRequested: `${PLUGIN_EVENT_PREFIX}:data-requested`,
  LoadData: `${PLUGIN_EVENT_PREFIX}:load-data`,
  CanvasSaved: {
    Before: `${PLUGIN_EVENT_PREFIX}:canvas-saved:before`,
    After: `${PLUGIN_EVENT_PREFIX}:canvas-saved:after`
  }
};

// src/canvas-extensions/shapes-canvas-extension.ts
var SHAPES = [
  {
    id: null,
    menuName: "Default",
    icon: "circle-off"
  },
  {
    id: "oval",
    menuName: "Oval",
    icon: "oval"
  },
  {
    id: "centered-rectangle",
    menuName: "Rectangle",
    icon: "rectangle-horizontal"
  },
  {
    id: "diamond",
    menuName: "Diamond",
    icon: "diamond"
  },
  {
    id: "parallelogram",
    menuName: "Parallelogram",
    icon: "parallelogram"
  },
  {
    id: "circle",
    menuName: "Circle",
    icon: "circle"
  },
  {
    id: "predefined-process",
    menuName: "Predefined process",
    icon: "predefined-process"
  },
  {
    id: "document",
    menuName: "Document",
    icon: "document"
  },
  {
    id: "database",
    menuName: "Database",
    icon: "database-shape"
  }
];
var ShapesCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    if (!this.plugin.settingsManager.getSetting("shapesFeatureEnabled"))
      return;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.PopupMenuCreated,
      (canvas) => this.onPopupMenuCreated(canvas)
    ));
  }
  onPopupMenuCreated(canvas) {
    if (canvas.readonly || !this.hasValidNodeInSelection(canvas))
      return;
    const nestedMenuOptions = SHAPES.map((shape) => ({
      label: shape.menuName,
      icon: shape.icon,
      callback: () => this.setShapeForSelection(canvas, shape)
    }));
    const menuOption = createExpandablePopupMenuOption({
      id: "node-shape-option",
      label: "Node shape",
      icon: "shapes"
    }, nestedMenuOptions);
    addPopupMenuOption(canvas, menuOption);
  }
  hasValidNodeInSelection(canvas) {
    const selectedNodesData = canvas.getSelectionData().nodes;
    for (const nodeData of selectedNodesData) {
      if (nodeData.type === "text")
        return true;
    }
    return false;
  }
  setShapeForSelection(canvas, shape) {
    const selectedNodesData = canvas.getSelectionData().nodes;
    for (const nodeData of selectedNodesData) {
      if (nodeData.type !== "text")
        continue;
      const node = canvas.nodes.get(nodeData.id);
      if (!node)
        continue;
      canvas.setNodeData(node, "shape", shape.id);
    }
  }
};

// node_modules/monkey-around/mjs/index.js
function around(obj, factories) {
  const removers = Object.keys(factories).map((key) => around1(obj, key, factories[key]));
  return removers.length === 1 ? removers[0] : function() {
    removers.forEach((r) => r());
  };
}
function around1(obj, method, createWrapper) {
  const original = obj[method], hadOwn = obj.hasOwnProperty(method);
  let current = createWrapper(original);
  if (original)
    Object.setPrototypeOf(current, original);
  Object.setPrototypeOf(wrapper, current);
  obj[method] = wrapper;
  return remove;
  function wrapper(...args) {
    if (current === original && obj[method] === wrapper)
      remove();
    return current.apply(this, args);
  }
  function remove() {
    if (obj[method] === wrapper) {
      if (hadOwn)
        obj[method] = original;
      else
        delete obj[method];
    }
    if (current === original)
      return;
    current = original;
    Object.setPrototypeOf(wrapper, original || Function);
  }
}

// src/utils/patch-helper.ts
function patchWorkspaceFunction(plugin, getTarget, functions) {
  return new Promise((resolve) => {
    const tryPatch = () => {
      const target = getTarget();
      if (!target)
        return null;
      const uninstaller = around(target.constructor.prototype, functions);
      plugin.register(uninstaller);
      return target;
    };
    const result = tryPatch();
    if (result) {
      resolve(result);
      return;
    }
    const listener = plugin.app.workspace.on("layout-change", () => {
      const result2 = tryPatch();
      if (result2) {
        plugin.app.workspace.offref(listener);
        resolve(result2);
      }
    });
    plugin.registerEvent(listener);
  });
}

// src/events/canvas-event-emitter.ts
var CanvasEventEmitter = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.applyPatches();
  }
  async applyPatches() {
    const that = this;
    patchWorkspaceFunction(this.plugin, () => {
      var _a;
      return (_a = this.plugin.getCurrentCanvas()) == null ? void 0 : _a.menu;
    }, {
      render: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.PopupMenuCreated, this.canvas);
        next.call(this);
        return result;
      }
    });
    patchWorkspaceFunction(this.plugin, () => {
      var _a;
      return (_a = this.plugin.getCurrentCanvas()) == null ? void 0 : _a.nodeInteractionLayer;
    }, {
      setTarget: (next) => function(node) {
        const result = next.call(this, node);
        that.triggerWorkspaceEvent(CanvasEvent.NodeInteraction, this.canvas, node);
        return result;
      }
    });
    const canvasView = await patchWorkspaceFunction(this.plugin, () => this.plugin.getCurrentCanvasView(), {
      getViewData: (_next) => function(..._args) {
        return JSON.stringify(this.canvas.getData(), null, 2);
      },
      setViewData: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.CanvasChanged, this.canvas);
        return result;
      }
    });
    await patchWorkspaceFunction(this.plugin, () => canvasView == null ? void 0 : canvasView.canvas, {
      // Add custom function
      setNodeData: (_next) => function(node, key, value) {
        node.setData({
          ...node.getData(),
          [key]: value
        });
        this.requestSave();
        that.triggerWorkspaceEvent(CanvasEvent.NodeChanged, this, node);
      },
      setEdgeData: (_next) => function(edge, key, value) {
        edge.setData({
          ...edge.getData(),
          [key]: value
        });
        this.requestSave();
        that.triggerWorkspaceEvent(CanvasEvent.EdgeChanged, this, edge);
      },
      markViewportChanged: (next) => function(...args) {
        that.triggerWorkspaceEvent(CanvasEvent.ViewportChanged.Before, this);
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.ViewportChanged.After, this);
        return result;
      },
      markMoved: (next) => function(node) {
        const result = next.call(this, node);
        that.triggerWorkspaceEvent(CanvasEvent.NodeMoved, this, node);
        return result;
      },
      setDragging: (next) => function(dragging) {
        const result = next.call(this, dragging);
        that.triggerWorkspaceEvent(CanvasEvent.DraggingStateChanged, this, dragging);
        return result;
      },
      updateSelection: (next) => function(update) {
        const oldSelection = new Set(this.selection);
        const result = next.call(this, update);
        that.triggerWorkspaceEvent(CanvasEvent.SelectionChanged, this, oldSelection, (update2) => next.call(this, update2));
        return result;
      },
      addNode: (next) => function(node) {
        that.runAfterInitialized(node, () => {
          that.triggerWorkspaceEvent(CanvasEvent.NodeAdded, this, node);
          that.triggerWorkspaceEvent(CanvasEvent.NodeChanged, this, node);
        });
        return next.call(this, node);
      },
      addEdge: (next) => function(edge) {
        that.patchEdge(edge);
        that.runAfterInitialized(edge, () => {
          that.triggerWorkspaceEvent(CanvasEvent.EdgeAdded, this, edge);
        });
        return next.call(this, edge);
      },
      removeNode: (next) => function(node) {
        const result = next.call(this, node);
        that.triggerWorkspaceEvent(CanvasEvent.NodeRemoved, this, node);
        return result;
      },
      removeEdge: (next) => function(edge) {
        const result = next.call(this, edge);
        that.triggerWorkspaceEvent(CanvasEvent.EdgeRemoved, this, edge);
        return result;
      },
      zoomToBbox: (next) => function(bbox) {
        that.triggerWorkspaceEvent(CanvasEvent.ZoomToBbox.Before, this, bbox);
        const result = next.call(this, bbox);
        that.triggerWorkspaceEvent(CanvasEvent.ZoomToBbox.After, this, bbox);
        return result;
      },
      setReadonly: (next) => function(readonly) {
        const result = next.call(this, readonly);
        that.triggerWorkspaceEvent(CanvasEvent.ReadonlyChanged, this, readonly);
        return result;
      },
      undo: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.Undo, this);
        this.nodes.forEach((node) => that.runAfterInitialized(node, () => {
          that.triggerWorkspaceEvent(CanvasEvent.NodeAdded, this, node);
          that.triggerWorkspaceEvent(CanvasEvent.NodeChanged, this, node);
        }));
        this.edges.forEach((edge) => that.runAfterInitialized(edge, () => {
          that.triggerWorkspaceEvent(CanvasEvent.EdgeAdded, this, edge);
          that.triggerWorkspaceEvent(CanvasEvent.EdgeChanged, this, edge);
        }));
        return result;
      },
      redo: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.Redo, this);
        this.nodes.forEach((node) => that.runAfterInitialized(node, () => {
          that.triggerWorkspaceEvent(CanvasEvent.NodeAdded, this, node);
          that.triggerWorkspaceEvent(CanvasEvent.NodeChanged, this, node);
        }));
        this.edges.forEach((edge) => that.runAfterInitialized(edge, () => {
          that.triggerWorkspaceEvent(CanvasEvent.EdgeAdded, this, edge);
          that.triggerWorkspaceEvent(CanvasEvent.EdgeChanged, this, edge);
        }));
        return result;
      },
      getData: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.DataRequested, this, result);
        return result;
      },
      setData: (next) => function(data) {
        const targetFilePath = this.view.file.path;
        const setData = (data2) => {
          if (!this.view.file || this.view.file.path !== targetFilePath)
            return;
          this.importData(data2);
          this.nodes.forEach((node) => that.runAfterInitialized(node, () => that.triggerWorkspaceEvent(CanvasEvent.NodeChanged, this, node)));
        };
        that.triggerWorkspaceEvent(CanvasEvent.LoadData, this, data, setData);
        const result = next.call(this, data);
        this.nodes.forEach((node) => that.runAfterInitialized(node, () => that.triggerWorkspaceEvent(CanvasEvent.NodeChanged, this, node)));
        return result;
      },
      requestSave: (next) => function(...args) {
        that.triggerWorkspaceEvent(CanvasEvent.CanvasSaved.Before, this);
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.CanvasSaved.After, this);
        return result;
      }
    });
    this.plugin.app.workspace.iterateAllLeaves((leaf) => {
      if (leaf.view.getViewType() !== "canvas")
        return;
      const canvasView2 = leaf.view;
      canvasView2.canvas.edges.forEach((edge) => this.patchEdge(edge));
      canvasView2.canvas.nodes.forEach((node) => that.runAfterInitialized(node, () => that.triggerWorkspaceEvent(CanvasEvent.NodeAdded, canvasView2.canvas, node)));
      canvasView2.canvas.edges.forEach((edge) => that.runAfterInitialized(edge, () => that.triggerWorkspaceEvent(CanvasEvent.EdgeAdded, canvasView2.canvas, edge)));
      canvasView2.setViewData(canvasView2.getViewData());
      this.triggerWorkspaceEvent(CanvasEvent.PopupMenuCreated, canvasView2.canvas);
    });
  }
  patchEdge(edge) {
    const that = this;
    const uninstall = around(edge, {
      render: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.EdgeChanged, this.canvas, edge);
        return result;
      },
      getCenter: (next) => function(...args) {
        const result = next.call(this, ...args);
        that.triggerWorkspaceEvent(CanvasEvent.EdgeCenterRequested, this.canvas, edge, result);
        return result;
      }
    });
    that.plugin.register(uninstall);
  }
  runAfterInitialized(canvasElement, onReady) {
    if (canvasElement.initialized) {
      onReady();
      return;
    }
    const that = this;
    const uninstall = around(canvasElement, {
      initialize: (next) => function(...args) {
        const result = next.call(this, ...args);
        onReady();
        uninstall();
        return result;
      }
    });
    that.plugin.register(uninstall);
  }
  triggerWorkspaceEvent(event, ...args) {
    this.plugin.app.workspace.trigger(event, ...args);
  }
};

// src/canvas-extensions/group-canvas-extension.ts
var GROUP_NODE_SIZE = { width: 300, height: 300 };
var GroupCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.CanvasChanged,
      (canvas) => {
        addCardMenuOption(
          canvas,
          createCardMenuOption(
            canvas,
            {
              id: "create-group",
              label: "Drag to add group",
              icon: "group"
            },
            () => GROUP_NODE_SIZE,
            (canvas2, pos) => {
              canvas2.createGroupNode({
                pos,
                size: GROUP_NODE_SIZE
              });
            }
          )
        );
      }
    ));
  }
};

// src/canvas-extensions/presentation-canvas-extension.ts
var import_obsidian3 = require("obsidian");
var START_SLIDE_NAME = "Start Slide";
var DEFAULT_SLIDE_NAME = "New Slide";
var PresentationCanvasExtension = class {
  constructor(plugin) {
    this.savedViewport = null;
    this.isPresentationMode = false;
    this.visitedNodes = [];
    this.plugin = plugin;
    if (!this.plugin.settingsManager.getSetting("presentationFeatureEnabled"))
      return;
    this.plugin.addCommand({
      id: "create-new-slide",
      name: "Create new slide",
      checkCallback: canvasCommand(
        this.plugin,
        (canvas) => !canvas.readonly && !this.isPresentationMode,
        (canvas) => this.addSlide(canvas)
      )
    });
    this.plugin.addCommand({
      id: "start-presentation",
      name: "Start presentation",
      checkCallback: canvasCommand(
        this.plugin,
        (_canvas) => !this.isPresentationMode,
        (canvas) => this.startPresentation(canvas)
      )
    });
    this.plugin.addCommand({
      id: "previous-node",
      name: "Previous node",
      checkCallback: canvasCommand(
        this.plugin,
        (_canvas) => this.isPresentationMode,
        (canvas) => this.previousNode(canvas)
      )
    });
    this.plugin.addCommand({
      id: "next-node",
      name: "Next node",
      checkCallback: canvasCommand(
        this.plugin,
        (_canvas) => this.isPresentationMode,
        (canvas) => this.nextNode(canvas)
      )
    });
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.CanvasChanged,
      (canvas) => this.onCanvasChanged(canvas)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.PopupMenuCreated,
      (canvas) => this.onPopupMenuCreated(canvas)
    ));
  }
  onCanvasChanged(canvas) {
    addCardMenuOption(
      canvas,
      createCardMenuOption(
        canvas,
        {
          id: "new-slide",
          label: "Drag to add slide",
          icon: "gallery-vertical"
        },
        () => this.getSlideSize(),
        (canvas2, pos) => this.addSlide(canvas2, pos)
      )
    );
  }
  onPopupMenuCreated(canvas) {
    const selectedNodeData = canvas.getSelectionData().nodes;
    if (canvas.readonly || selectedNodeData.length !== 1)
      return;
    const selectedNode = canvas.nodes.get(selectedNodeData[0].id);
    if (!selectedNode)
      return;
    addPopupMenuOption(
      canvas,
      createPopupMenuOption({
        id: "start-node",
        label: "Set as start slide",
        icon: "play",
        callback: () => this.setStartNode(canvas, selectedNode)
      })
    );
  }
  getStartNode(canvas) {
    for (const [_, node] of canvas.nodes) {
      if (node.getData().isStartNode)
        return node;
    }
    return void 0;
  }
  setStartNode(canvas, node) {
    if (!node)
      return;
    const startNode = this.getStartNode(canvas);
    if (startNode)
      canvas.setNodeData(startNode, "isStartNode", false);
    if (node !== startNode)
      canvas.setNodeData(node, "isStartNode", true);
  }
  getSlideSize() {
    const slideSizeString = this.plugin.settingsManager.getSetting("defaultSlideSize");
    const slideSizeArray = slideSizeString.split("x").map((value) => parseInt(value));
    return { width: slideSizeArray[0], height: slideSizeArray[1] };
  }
  addSlide(canvas, pos) {
    if (!pos)
      pos = getCenterCoordinates(canvas, this.getSlideSize());
    const isStartNode = this.getStartNode(canvas) == null;
    const nodeSize = this.getSlideSize();
    const groupNode = canvas.createGroupNode({
      pos,
      size: nodeSize,
      label: isStartNode ? START_SLIDE_NAME : DEFAULT_SLIDE_NAME,
      focus: false
    });
    if (isStartNode)
      canvas.setNodeData(groupNode, "isStartNode", true);
  }
  async animateNodeTransition(canvas, fromNode, toNode) {
    const useCustomZoomFunction = this.plugin.settingsManager.getSetting("zoomToSlideWithoutPadding");
    const animationDurationMs = this.plugin.settingsManager.getSetting("slideTransitionAnimationDuration") * 1e3;
    if (animationDurationMs > 0 && fromNode) {
      const animationIntensity = this.plugin.settingsManager.getSetting("slideTransitionAnimationIntensity");
      const currentNodeBBoxEnlarged = scaleBBox(fromNode.getBBox(), animationIntensity);
      if (useCustomZoomFunction)
        zoomToBBox(canvas, currentNodeBBoxEnlarged);
      else
        canvas.zoomToBbox(currentNodeBBoxEnlarged);
      await sleep(animationDurationMs / 2);
      const nextNodeBBoxEnlarged = scaleBBox(toNode.getBBox(), animationIntensity);
      if (useCustomZoomFunction)
        zoomToBBox(canvas, nextNodeBBoxEnlarged);
      else
        canvas.zoomToBbox(nextNodeBBoxEnlarged);
      await sleep(animationDurationMs / 2);
    }
    let nodeBBox = toNode.getBBox();
    if (useCustomZoomFunction)
      zoomToBBox(canvas, nodeBBox);
    else
      canvas.zoomToBbox(nodeBBox);
  }
  async startPresentation(canvas) {
    const startNode = this.getStartNode(canvas);
    if (!startNode) {
      new import_obsidian3.Notice("No start node found. Please mark a node as a start node trough the popup menu.");
      return;
    }
    this.visitedNodes = [];
    this.savedViewport = {
      x: canvas.tx,
      y: canvas.ty,
      zoom: canvas.tZoom
    };
    canvas.wrapperEl.focus();
    canvas.wrapperEl.requestFullscreen();
    canvas.wrapperEl.classList.add("presentation-mode");
    canvas.setReadonly(true);
    if (this.plugin.settingsManager.getSetting("useArrowKeysToChangeSlides")) {
      canvas.wrapperEl.onkeydown = (e) => {
        if (e.key === "ArrowRight")
          this.nextNode(canvas);
        else if (e.key === "ArrowLeft")
          this.previousNode(canvas);
      };
    }
    const fullscreenModalObserver = new MutationObserver((mutationRecords) => {
      mutationRecords.forEach((mutationRecord) => {
        mutationRecord.addedNodes.forEach((node) => {
          var _a;
          document.body.removeChild(node);
          (_a = document.fullscreenElement) == null ? void 0 : _a.appendChild(node);
        });
      });
      const inputField = document.querySelector(".prompt-input");
      if (inputField)
        inputField.focus();
    });
    fullscreenModalObserver.observe(document.body, { childList: true });
    canvas.wrapperEl.onfullscreenchange = (_e) => {
      if (document.fullscreenElement)
        return;
      fullscreenModalObserver.disconnect();
      this.endPresentation(canvas);
    };
    this.isPresentationMode = true;
    await sleep(500);
    this.visitedNodes.push(startNode);
    this.animateNodeTransition(canvas, void 0, startNode);
  }
  endPresentation(canvas) {
    canvas.wrapperEl.onkeydown = null;
    canvas.wrapperEl.onfullscreenchange = null;
    canvas.setReadonly(false);
    canvas.wrapperEl.classList.remove("presentation-mode");
    if (document.fullscreenElement)
      document.exitFullscreen();
    canvas.setViewport(this.savedViewport.x, this.savedViewport.y, this.savedViewport.zoom);
    this.isPresentationMode = false;
  }
  nextNode(canvas) {
    var _a;
    const fromNode = this.visitedNodes.last();
    if (!fromNode)
      return;
    const outgoingEdges = canvas.getEdgesForNode(fromNode).filter((edge) => edge.from.node === fromNode);
    let toNode = (_a = outgoingEdges.first()) == null ? void 0 : _a.to.node;
    if (outgoingEdges.length > 1) {
      const sortedEdges = outgoingEdges.sort((a, b) => {
        if (!a.label)
          return 1;
        if (!b.label)
          return -1;
        return a.label.localeCompare(b.label);
      });
      const traversedEdgesCount = this.visitedNodes.filter((visitedNode) => visitedNode == fromNode).length - 1;
      const nextEdge = sortedEdges[traversedEdgesCount];
      toNode = nextEdge.to.node;
    }
    if (toNode) {
      this.visitedNodes.push(toNode);
      this.animateNodeTransition(canvas, fromNode, toNode);
    } else {
      this.animateNodeTransition(canvas, fromNode, fromNode);
    }
  }
  previousNode(canvas) {
    const fromNode = this.visitedNodes.pop();
    if (!fromNode)
      return;
    let toNode = this.visitedNodes.last();
    if (!toNode) {
      toNode = fromNode;
      this.visitedNodes.push(fromNode);
    }
    this.animateNodeTransition(canvas, fromNode, toNode);
  }
};

// src/canvas-extensions/node-data-tagger-canvas-extension.ts
function getExposedNodeData(settings) {
  const exposedData = [];
  if (settings.getSetting("stickersFeatureEnabled"))
    exposedData.push("isSticker");
  if (settings.getSetting("shapesFeatureEnabled"))
    exposedData.push("shape");
  if (settings.getSetting("presentationFeatureEnabled"))
    exposedData.push("isStartNode");
  if (settings.getSetting("portalsFeatureEnabled"))
    exposedData.push("portalToFile", "portalId");
  return exposedData;
}
var NodeDataTaggerCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeChanged,
      (_canvas, node) => {
        const nodeData = node == null ? void 0 : node.getData();
        if (!nodeData)
          return;
        for (const dataKey of getExposedNodeData(this.plugin.settingsManager)) {
          const dataValue = nodeData[dataKey];
          if (dataValue === void 0)
            delete node.nodeEl.dataset[dataKey];
          else
            node.nodeEl.dataset[dataKey] = dataValue;
        }
      }
    ));
  }
};

// src/canvas-extensions/interaction-tagger-canvas-extension.ts
var TARGET_NODE_DATASET_PREFIX = "target";
var InteractionTaggerCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeInteraction,
      (canvas, node) => {
        const interactionEl = canvas.nodeInteractionLayer.interactionEl;
        if (!interactionEl)
          return;
        for (const dataKey of getExposedNodeData(this.plugin.settingsManager)) {
          const datasetKey = TARGET_NODE_DATASET_PREFIX + dataKey.toString().charAt(0).toUpperCase() + dataKey.toString().slice(1);
          const dataValue = node == null ? void 0 : node.getData()[dataKey];
          if (dataValue === void 0)
            delete interactionEl.dataset[datasetKey];
          else
            interactionEl.dataset[datasetKey] = dataValue;
        }
      }
    ));
  }
};

// src/canvas-extensions/readonly-canvas-extension.ts
var ReadonlyCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    const that = this;
    if (!this.plugin.settingsManager.getSetting("betterReadonlyEnabled"))
      return;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.PopupMenuCreated,
      (canvas, _node) => this.updatePopupMenu(canvas)
    ));
    let movingToBBox = false;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.ViewportChanged.Before,
      (canvas) => {
        var _a, _b, _c, _d, _e, _f;
        if (movingToBBox) {
          movingToBBox = false;
          that.updateLockedZoom(canvas);
          that.updateLockedPan(canvas);
          return;
        }
        if (!canvas.readonly)
          return;
        if (that.plugin.settingsManager.getSetting("disableZoom")) {
          canvas.zoom = (_a = canvas.lockedZoom) != null ? _a : canvas.zoom;
          canvas.tZoom = (_b = canvas.lockedZoom) != null ? _b : canvas.tZoom;
        }
        if (that.plugin.settingsManager.getSetting("disablePan")) {
          canvas.x = (_c = canvas.lockedX) != null ? _c : canvas.x;
          canvas.tx = (_d = canvas.lockedX) != null ? _d : canvas.tx;
          canvas.y = (_e = canvas.lockedY) != null ? _e : canvas.y;
          canvas.ty = (_f = canvas.lockedY) != null ? _f : canvas.ty;
        }
      }
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.ZoomToBbox.Before,
      () => movingToBBox = true
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.ReadonlyChanged,
      (canvas, _readonly) => {
        this.updatePopupMenu(canvas);
        this.updateLockedZoom(canvas);
        this.updateLockedPan(canvas);
      }
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.CanvasChanged,
      (canvas) => this.addQuickSettings(canvas)
    ));
  }
  addQuickSettings(canvas) {
    var _a;
    const settingsContainer = (_a = canvas.quickSettingsButton) == null ? void 0 : _a.parentElement;
    if (!settingsContainer)
      return;
    addQuickSettingsButton(
      settingsContainer,
      this.createToggle({
        id: "disable-node-popup",
        label: "Disable node popup",
        icon: "arrow-up-right-from-circle",
        callback: () => this.updatePopupMenu(canvas)
      }, "disableNodePopup")
    );
    addQuickSettingsButton(
      settingsContainer,
      this.createToggle({
        id: "disable-zoom",
        label: "Disable zoom",
        icon: "zoom-in",
        callback: () => this.updateLockedZoom(canvas)
      }, "disableZoom")
    );
    addQuickSettingsButton(
      settingsContainer,
      this.createToggle({
        id: "disable-pan",
        label: "Disable pan",
        icon: "move",
        callback: () => this.updateLockedPan(canvas)
      }, "disablePan")
    );
  }
  createToggle(menuOption, settingKey) {
    const toggle = createQuickSettingsButton({
      ...menuOption,
      callback: () => (async () => {
        var _a;
        const newValue = !this.plugin.settingsManager.getSetting(settingKey);
        await this.plugin.settingsManager.setSetting({ [settingKey]: newValue });
        toggle.dataset.toggled = this.plugin.settingsManager.getSetting(settingKey).toString();
        (_a = menuOption.callback) == null ? void 0 : _a.call(this);
      })()
    });
    toggle.classList.add("show-while-readonly");
    toggle.dataset.toggled = this.plugin.settingsManager.getSetting(settingKey).toString();
    return toggle;
  }
  updatePopupMenu(canvas) {
    const hidden = canvas.readonly && this.plugin.settingsManager.getSetting("disableNodePopup");
    canvas.menu.menuEl.style.visibility = hidden ? "hidden" : "visible";
  }
  updateLockedZoom(canvas) {
    canvas.lockedZoom = canvas.tZoom;
  }
  updateLockedPan(canvas) {
    canvas.lockedX = canvas.tx;
    canvas.lockedY = canvas.ty;
  }
};

// src/utils/modal-helper.ts
var import_obsidian4 = require("obsidian");
var FileNameModal = class extends import_obsidian4.SuggestModal {
  constructor(app, parentPath, fileExtension) {
    super(app);
    this.parentPath = parentPath;
    this.fileExtension = fileExtension;
  }
  getSuggestions(query) {
    const queryWithoutExtension = query.replace(new RegExp(`\\.${this.fileExtension}$`), "");
    if (queryWithoutExtension === "")
      return [];
    const queryWithExtension = queryWithoutExtension + "." + this.fileExtension;
    const suggestions = [`${this.parentPath}/${queryWithExtension}`, queryWithExtension].filter((s) => this.app.vault.getAbstractFileByPath(s) === null);
    return suggestions;
  }
  renderSuggestion(text, el) {
    el.setText(text);
  }
  onChooseSuggestion(_text, _evt) {
  }
  static awaitInput(modal) {
    return new Promise((resolve, _reject) => {
      modal.onChooseSuggestion = (text) => {
        resolve(text);
      };
      modal.open();
    });
  }
};

// src/canvas-extensions/encapsulate-canvas-extension.ts
var ENCAPSULATED_FILE_NODE_SIZE = { width: 300, height: 300 };
var EncapsulateCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    if (!this.plugin.settingsManager.getSetting("canvasEncapsulationEnabled"))
      return;
    this.plugin.addCommand({
      id: "encapsulate-selection",
      name: "Encapsulate selection",
      checkCallback: canvasCommand(
        this.plugin,
        (canvas) => !canvas.readonly && canvas.selection.size > 0,
        (canvas) => this.encapsulateSelection(canvas)
      )
    });
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      "canvas:selection-menu",
      (menu, canvas) => {
        menu.addItem(
          (item) => item.setTitle("Encapsulate").setIcon("file-plus").onClick(() => this.encapsulateSelection(canvas))
        );
      }
    ));
  }
  async encapsulateSelection(canvas) {
    var _a;
    const selection = canvas.getSelectionData();
    const sourceFileFolder = (_a = canvas.view.file.parent) == null ? void 0 : _a.path;
    if (!sourceFileFolder)
      return;
    const targetFilePath = await FileNameModal.awaitInput(new FileNameModal(
      this.plugin.app,
      sourceFileFolder,
      "canvas"
    ));
    const newFileData = { nodes: selection.nodes, edges: selection.edges };
    const file = await this.plugin.app.vault.create(targetFilePath, JSON.stringify(newFileData, null, 2));
    for (const nodeData of selection.nodes) {
      const node = canvas.nodes.get(nodeData.id);
      if (node)
        canvas.removeNode(node);
    }
    canvas.createFileNode({
      pos: {
        x: selection.center.x - ENCAPSULATED_FILE_NODE_SIZE.width / 2,
        y: selection.center.y - ENCAPSULATED_FILE_NODE_SIZE.height / 2
      },
      size: ENCAPSULATED_FILE_NODE_SIZE,
      file
    });
  }
};

// src/canvas-extensions/commands-canvas-extension.ts
var DIRECTIONS = ["up", "down", "left", "right"];
var CommandsCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    if (!this.plugin.settingsManager.getSetting("commandsFeatureEnabled"))
      return;
    this.plugin.addCommand({
      id: "create-text-node",
      name: "Create text node",
      checkCallback: canvasCommand(
        this.plugin,
        (canvas) => !canvas.readonly,
        (canvas) => this.createTextNode(canvas)
      )
    });
    this.plugin.addCommand({
      id: "zoom-to-selection",
      name: "Zoom to selection",
      checkCallback: canvasCommand(
        this.plugin,
        (canvas) => canvas.selection.size > 0,
        (canvas) => canvas.zoomToSelection()
      )
    });
    for (const direction of DIRECTIONS) {
      this.plugin.addCommand({
        id: `clone-node-${direction}`,
        name: `Clone node ${direction}`,
        checkCallback: canvasCommand(
          this.plugin,
          (canvas) => {
            var _a;
            return !canvas.readonly && canvas.selection.size === 1 && ((_a = canvas.selection.values().next().value) == null ? void 0 : _a.getData().type) === "text";
          },
          (canvas) => this.cloneNode(canvas, direction)
        )
      });
      this.plugin.addCommand({
        id: `expand-node-${direction}`,
        name: `Expand node ${direction}`,
        checkCallback: canvasCommand(
          this.plugin,
          (canvas) => !canvas.readonly && canvas.selection.size === 1,
          (canvas) => this.expandNode(canvas, direction)
        )
      });
    }
  }
  createTextNode(canvas) {
    const size = canvas.config.defaultTextNodeDimensions;
    const pos = getCenterCoordinates(canvas, size);
    canvas.createTextNode({ pos, size });
  }
  cloneNode(canvas, cloneDirection) {
    const sourceNode = canvas.selection.values().next().value;
    if (!sourceNode)
      return;
    const sourceNodeData = sourceNode.getData();
    const nodeMargin = this.plugin.settingsManager.getSetting("cloneNodeMargin");
    const offset = {
      x: (sourceNode.width + nodeMargin) * (cloneDirection === "left" ? -1 : cloneDirection === "right" ? 1 : 0),
      y: (sourceNode.height + nodeMargin) * (cloneDirection === "up" ? -1 : cloneDirection === "down" ? 1 : 0)
    };
    const clonedNode = canvas.createTextNode({
      pos: {
        x: sourceNode.x + offset.x,
        y: sourceNode.y + offset.y
      },
      size: {
        width: sourceNode.width,
        height: sourceNode.height
      }
    });
    clonedNode.color = sourceNode.color;
    canvas.setNodeData(clonedNode, "shape", sourceNodeData.shape);
    if (this.plugin.settingsManager.getSetting("zoomToClonedNode"))
      canvas.zoomToBbox(clonedNode.getBBox());
  }
  expandNode(canvas, expandDirection) {
    const node = canvas.selection.values().next().value;
    if (!node)
      return;
    const expandNodeStepSize = this.plugin.settingsManager.getSetting("expandNodeStepSize");
    const expand = {
      x: expandDirection === "left" ? -1 : expandDirection === "right" ? 1 : 0,
      y: expandDirection === "up" ? -1 : expandDirection === "down" ? 1 : 0
    };
    node.setData({
      ...node.getData(),
      width: node.width + expand.x * expandNodeStepSize,
      height: node.height + expand.y * expandNodeStepSize
    });
  }
};

// src/canvas-extensions/portals-canvas-extension.ts
var import_obsidian5 = require("obsidian");
var PORTAL_PADDING = 50;
var MIN_OPEN_PORTAL_SIZE = { width: 200, height: 200 };
var PortalsCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    if (!this.plugin.settingsManager.getSetting("portalsFeatureEnabled"))
      return;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.PopupMenuCreated,
      (canvas) => this.updatePopupMenu(canvas)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeRemoved,
      (canvas, node) => this.onNodeRemoved(canvas, node)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeMoved,
      (canvas, node) => this.onNodeMoved(canvas, node)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.DraggingStateChanged,
      (canvas, startedDragging) => this.onDraggingStateChanged(canvas, startedDragging)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.SelectionChanged,
      (canvas, oldSelection, updateSelection) => this.onSelectionChanged(canvas, oldSelection, updateSelection)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.EdgeChanged,
      (canvas, edge) => this.onEdgeChanged(canvas, edge)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.Undo,
      (canvas) => {
        this.getCanvasDataWithPortals(canvas, canvas.getData()).then((data) => canvas.importData(data));
      }
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.Redo,
      (canvas) => {
        this.getCanvasDataWithPortals(canvas, canvas.getData()).then((data) => canvas.importData(data));
      }
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.DataRequested,
      (canvas, data) => this.removePortalCanvasData(canvas, data)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.LoadData,
      (canvas, data, setData) => {
        this.getCanvasDataWithPortals(canvas, data).then((newData) => {
          if (newData.nodes.length === data.nodes.length && newData.edges.length === data.edges.length)
            return;
          setData(newData);
        });
      }
    ));
  }
  updatePopupMenu(canvas) {
    if (canvas.readonly)
      return;
    const selectedFileNodes = canvas.getSelectionData().nodes.map((nodeData) => {
      var _a;
      const node = canvas.nodes.get(nodeData.id);
      if (!node)
        return null;
      if (nodeData.type !== "file")
        return null;
      if (((_a = node.file) == null ? void 0 : _a.extension) === "canvas")
        return node;
      if (nodeData.portalToFile)
        this.setPortalOpen(canvas, node, false);
      return null;
    }).filter((node) => node !== null);
    if (selectedFileNodes.length !== 1)
      return;
    const portalNode = selectedFileNodes[0];
    const portalNodeData = portalNode.getData();
    if (portalNodeData.portalToFile && portalNodeData.file !== portalNodeData.portalToFile) {
      this.setPortalOpen(canvas, portalNode, true);
    }
    addPopupMenuOption(
      canvas,
      createPopupMenuOption({
        id: "toggle-portal",
        label: portalNodeData.portalToFile ? "Close portal" : "Open portal",
        icon: portalNodeData.portalToFile ? "door-open" : "door-closed",
        callback: () => {
          this.setPortalOpen(canvas, portalNode, portalNodeData.portalToFile === void 0);
          this.updatePopupMenu(canvas);
        }
      })
    );
  }
  setPortalOpen(canvas, portalNode, open) {
    const portalNodeData = portalNode.getData();
    canvas.setNodeData(portalNode, "portalToFile", open ? portalNodeData.file : void 0);
    canvas.setData(canvas.getData());
  }
  onNodeRemoved(canvas, node) {
    var _a, _b, _c, _d;
    const nodeData = node.getData();
    if (nodeData.type !== "file" || !nodeData.portalToFile)
      return;
    Object.keys((_b = (_a = nodeData.portalIdMaps) == null ? void 0 : _a.nodeIdMap) != null ? _b : {}).map((refNodeId) => canvas.nodes.get(refNodeId)).filter((node2) => node2 !== void 0).forEach((node2) => canvas.removeNode(node2));
    Object.keys((_d = (_c = nodeData.portalIdMaps) == null ? void 0 : _c.edgeIdMap) != null ? _d : {}).map((refEdgeId) => canvas.edges.get(refEdgeId)).filter((edge) => edge !== void 0).forEach((edge) => canvas.removeEdge(edge));
  }
  onEdgeChanged(_canvas, edge) {
    const isUnsaved = edge.from.node !== void 0 && edge.to.node !== void 0 && // Edge not fully connected
    (edge.from.node.getData().portalId !== void 0 && edge.to.node.getData().portalId !== void 0) && // Both nodes are from portal
    edge.getData().portalId === void 0;
    edge.setData({
      ...edge.getData(),
      isUnsaved: isUnsaved ? true : void 0
    });
  }
  onSelectionChanged(canvas, oldSelection, updateSelection) {
    updateSelection(() => {
      const updatedSelection = Array.from(canvas.selection).filter((node) => node.getData().portalId === void 0);
      canvas.selection = new Set(updatedSelection);
    });
    const previouslySelectedPortalNodesIds = Array.from(oldSelection).filter((node) => node.getData().portalToFile !== void 0).flatMap((node) => {
      const portalNodeData = node.getData();
      const nestedPortalsIds = this.getNestedPortalsIds(canvas, portalNodeData.id);
      return [portalNodeData.id, ...nestedPortalsIds];
    });
    for (const node of canvas.nodes.values()) {
      const nodeData = node.getData();
      if (nodeData.portalId === void 0 || !previouslySelectedPortalNodesIds.includes(nodeData.portalId))
        continue;
      node.updateZIndex();
    }
  }
  getNestedPortalsIds(canvas, portalId) {
    const nestedPortalsIds = [];
    for (const node of canvas.nodes.values()) {
      const nodeData = node.getData();
      if (nodeData.portalId === portalId) {
        nestedPortalsIds.push(nodeData.id);
        nestedPortalsIds.push(...this.getNestedPortalsIds(canvas, nodeData.id));
      }
    }
    return nestedPortalsIds;
  }
  onDraggingStateChanged(canvas, startedDragging) {
    var _a;
    if (!canvas.getSelectionData().nodes.some((node) => node.type === "file" && node.portalToFile))
      return;
    if (startedDragging) {
      const objectSnappingEnabled = canvas.options.snapToObjects;
      this.restoreObjectSnappingState = () => canvas.toggleObjectSnapping(objectSnappingEnabled);
      if (objectSnappingEnabled)
        canvas.toggleObjectSnapping(false);
    } else
      (_a = this.restoreObjectSnappingState) == null ? void 0 : _a.call(this);
  }
  onNodeMoved(canvas, node) {
    const nodeData = node.getData();
    if (nodeData.type !== "file" || !nodeData.portalToFile)
      return;
    this.onOpenPortalMoved(canvas, node);
  }
  onOpenPortalMoved(canvas, portalNode) {
    var _a;
    let portalNodeData = portalNode.getData();
    const nestedNodesIdMap = (_a = portalNode.getData().portalIdMaps) == null ? void 0 : _a.nodeIdMap;
    if (!nestedNodesIdMap)
      return;
    const nestedNodes = Object.keys(nestedNodesIdMap).map((refNodeId) => canvas.nodes.get(refNodeId)).filter((node) => node !== void 0);
    const sourceBBox = getBBox(nestedNodes);
    const targetSize = this.getPortalSize(sourceBBox);
    if (portalNodeData.width !== targetSize.width || portalNodeData.height !== targetSize.height) {
      portalNode.setData({
        ...portalNodeData,
        width: targetSize.width,
        height: targetSize.height
      });
      return;
    }
    const portalOffset = {
      x: portalNodeData.x - sourceBBox.minX + PORTAL_PADDING,
      y: portalNodeData.y - sourceBBox.minY + PORTAL_PADDING
    };
    for (const nestedNode of nestedNodes) {
      const nestedNodeData = nestedNode.getData();
      nestedNode.setData({
        ...nestedNodeData,
        x: nestedNodeData.x + portalOffset.x,
        y: nestedNodeData.y + portalOffset.y
      });
    }
  }
  removePortalCanvasData(_canvas, data) {
    var _a, _b;
    data.edges = data.edges.filter((edgeData) => {
      var _a2, _b2;
      if (edgeData.portalId !== void 0)
        return false;
      const fromNodeData = data.nodes.find((nodeData) => nodeData.id === edgeData.fromNode);
      const toNodeData = data.nodes.find((nodeData) => nodeData.id === edgeData.toNode);
      if (!fromNodeData || !toNodeData)
        return true;
      if (fromNodeData.portalId === void 0 && toNodeData.portalId === void 0) {
        return true;
      } else if (fromNodeData.portalId !== void 0 && toNodeData.portalId !== void 0) {
        return false;
      } else {
        const fromPortalNodeData = fromNodeData.portalId !== void 0 ? fromNodeData : toNodeData;
        const notFromPortalNodeData = fromNodeData.portalId !== void 0 ? toNodeData : fromNodeData;
        notFromPortalNodeData.edgesToNodeFromPortal = (_a2 = notFromPortalNodeData.edgesToNodeFromPortal) != null ? _a2 : {};
        notFromPortalNodeData.edgesToNodeFromPortal[fromPortalNodeData.portalId] = (_b2 = notFromPortalNodeData.edgesToNodeFromPortal[fromPortalNodeData.portalId]) != null ? _b2 : [];
        notFromPortalNodeData.edgesToNodeFromPortal[fromPortalNodeData.portalId].push(edgeData);
        return false;
      }
    });
    data.nodes = data.nodes.filter((nodeData) => nodeData.portalId === void 0);
    for (const portalNodeData of data.nodes) {
      if (portalNodeData.type !== "file")
        continue;
      if (this.plugin.settingsManager.getSetting("maintainClosedPortalSize")) {
        portalNodeData.width = (_a = portalNodeData.closedPortalWidth) != null ? _a : portalNodeData.width;
        portalNodeData.height = (_b = portalNodeData.closedPortalHeight) != null ? _b : portalNodeData.height;
      }
      delete portalNodeData.closedPortalWidth;
      delete portalNodeData.closedPortalHeight;
      delete portalNodeData.portalIdMaps;
    }
  }
  async getCanvasDataWithPortals(canvas, dataRef) {
    const data = JSON.parse(JSON.stringify(dataRef));
    const addedData = await Promise.all(data.nodes.map((nodeData) => this.tryOpenPortal(canvas, nodeData)));
    for (const newData of addedData) {
      data.nodes.push(...newData.nodes);
      data.edges.push(...newData.edges);
    }
    for (const originNodeData of data.nodes) {
      if (originNodeData.edgesToNodeFromPortal === void 0)
        continue;
      for (const [relativePortalId, edges] of Object.entries(originNodeData.edgesToNodeFromPortal)) {
        const idPrefix = originNodeData.portalId ? `${originNodeData.portalId}-` : "";
        const portalId = `${idPrefix}${relativePortalId}`;
        const targetPortalData = data.nodes.find((nodeData) => nodeData.id === portalId);
        if (!targetPortalData) {
          delete originNodeData.edgesToNodeFromPortal[portalId];
          continue;
        }
        if (targetPortalData.portalToFile) {
          data.edges.push(...edges.map((edge) => ({
            ...edge,
            portalId: originNodeData.portalId,
            fromNode: `${idPrefix}${edge.fromNode}`,
            toNode: `${idPrefix}${edge.toNode}`
          })));
          delete originNodeData.edgesToNodeFromPortal[portalId];
        } else if (this.plugin.settingsManager.getSetting("showEdgesIntoDisabledPortals")) {
          data.edges.push(...edges.map((edge) => {
            const fromNodeId = `${idPrefix}${edge.fromNode}`;
            const fromNode = data.nodes.find((nodeData) => nodeData.id === fromNodeId);
            const toNodeId = `${idPrefix}${edge.toNode}`;
            return {
              ...edge,
              fromNode: fromNode ? fromNodeId : portalId,
              toNode: fromNode ? portalId : toNodeId,
              portalId
              // Mark it as temporary
            };
          }));
        }
      }
      if (Object.keys(originNodeData.edgesToNodeFromPortal).length === 0)
        delete originNodeData.edgesToNodeFromPortal;
    }
    return data;
  }
  async tryOpenPortal(canvas, portalNodeData) {
    var _a, _b;
    const addedData = { nodes: [], edges: [] };
    if (portalNodeData.type !== "file" || !portalNodeData.portalToFile)
      return addedData;
    portalNodeData.portalToFile = portalNodeData.file;
    if (portalNodeData.portalToFile === canvas.view.file.path) {
      portalNodeData.portalToFile = void 0;
      return addedData;
    }
    const portalFile = this.plugin.app.vault.getAbstractFileByPath(portalNodeData.file);
    if (!(portalFile instanceof import_obsidian5.TFile) || portalFile.extension !== "canvas") {
      portalNodeData.portalToFile = void 0;
      return addedData;
    }
    const portalFileData = JSON.parse(await this.plugin.app.vault.cachedRead(portalFile));
    if (!portalFileData) {
      portalNodeData.portalToFile = void 0;
      return addedData;
    }
    portalNodeData.portalIdMaps = {
      nodeIdMap: {},
      edgeIdMap: {}
    };
    const sourceMinCoordinates = getBBox(portalFileData.nodes);
    const portalOffset = {
      x: portalNodeData.x - sourceMinCoordinates.minX + PORTAL_PADDING,
      y: portalNodeData.y - sourceMinCoordinates.minY + PORTAL_PADDING
    };
    for (const nodeDataFromPortal of portalFileData.nodes) {
      const refNodeId = `${portalNodeData.id}-${nodeDataFromPortal.id}`;
      portalNodeData.portalIdMaps.nodeIdMap[refNodeId] = nodeDataFromPortal.id;
      const addedNode = {
        ...nodeDataFromPortal,
        id: refNodeId,
        x: nodeDataFromPortal.x + portalOffset.x,
        y: nodeDataFromPortal.y + portalOffset.y,
        portalId: portalNodeData.id
      };
      addedData.nodes.push(addedNode);
      const nestedNodes = await this.tryOpenPortal(canvas, addedNode);
      addedData.nodes.push(...nestedNodes.nodes);
      addedData.edges.push(...nestedNodes.edges);
    }
    for (const edgeDataFromPortal of portalFileData.edges) {
      const refEdgeId = `${portalNodeData.id}-${edgeDataFromPortal.id}`;
      portalNodeData.portalIdMaps.edgeIdMap[refEdgeId] = edgeDataFromPortal.id;
      const fromRefNode = (_a = Object.entries(portalNodeData.portalIdMaps.nodeIdMap).find(([_refNodeId, nodeId]) => nodeId === edgeDataFromPortal.fromNode)) == null ? void 0 : _a[0];
      const toRefNode = (_b = Object.entries(portalNodeData.portalIdMaps.nodeIdMap).find(([_refNodeId, nodeId]) => nodeId === edgeDataFromPortal.toNode)) == null ? void 0 : _b[0];
      addedData.edges.push({
        ...edgeDataFromPortal,
        id: refEdgeId,
        fromNode: fromRefNode,
        toNode: toRefNode,
        portalId: portalNodeData.id
      });
    }
    const nestedNodesBBox = getBBox(addedData.nodes);
    const targetSize = this.getPortalSize(nestedNodesBBox);
    portalNodeData.closedPortalWidth = portalNodeData.width;
    portalNodeData.closedPortalHeight = portalNodeData.height;
    portalNodeData.width = targetSize.width;
    portalNodeData.height = targetSize.height;
    return addedData;
  }
  getPortalSize(sourceBBox) {
    const sourceSize = {
      width: sourceBBox.maxX - sourceBBox.minX,
      height: sourceBBox.maxY - sourceBBox.minY
    };
    const targetSize = {
      width: Math.max(sourceSize.width + PORTAL_PADDING * 2, MIN_OPEN_PORTAL_SIZE.width),
      height: Math.max(sourceSize.height + PORTAL_PADDING * 2, MIN_OPEN_PORTAL_SIZE.height)
    };
    if (!Number.isFinite(targetSize.width))
      targetSize.width = MIN_OPEN_PORTAL_SIZE.width;
    if (!Number.isFinite(targetSize.height))
      targetSize.height = MIN_OPEN_PORTAL_SIZE.height;
    return targetSize;
  }
};

// src/utils/icons-helper.ts
var import_obsidian6 = require("obsidian");
var CUSTOM_ICONS = {
  "oval": `<rect rx="31.25" height="62.5" width="93.75" y="18.75" x="3.125" stroke-width="8.333" stroke="currentColor" fill="transparent"/>`,
  "parallelogram": `<rect transform="skewX(-20)" rx="5" height="50" width="70" y="25" x="35" stroke-width="8.333" stroke="currentColor" fill="transparent"/>`,
  "predefined-process": `
    <g stroke-width="2" stroke="currentColor" fill="none" transform="matrix(4.166667,0,0,4.166667,0,0)">
      <path d="M 4.999687 3 L 19.000312 3 C 20.104688 3 21 3.895312 21 4.999687 L 21 19.000312 C 21 20.104688 20.104688 21 19.000312 21 L 4.999687 21 C 3.895312 21 3 20.104688 3 19.000312 L 3 4.999687 C 3 3.895312 3.895312 3 4.999687 3 Z M 4.999687 3 "/>
      <path d="M 7 3 L 7 21 "/>
      <path d="M 17 3 L 17 21 "/>
    </g>
  `,
  "document": `<path transform="translate(0, 5)" stroke="currentColor" fill="none" stroke-width="8.333" d="M83.75 25C85.82 25 87.5 26.68 87.5 28.75L87.5 64.375Q68.75 54.25 50 64.375 31.25 74.5 12.5 64.375L12.5 30.625 12.5 28.75C12.5 26.68 14.18 25 16.25 25Z"/>`,
  "database-shape": `
    <g transform="translate(20, 20)" stroke-width="8.333" stroke="currentColor" fill="none">
      <path d="M 1 51 L 1 11 C 1 5.48 14.43 1 31 1 C 47.57 1 61 5.48 61 11 L 61 51 C 61 56.52 47.57 61 31 61 C 14.43 61 1 56.52 1 51 Z"/>
      <path d="M 1 11 C 1 16.52 14.43 21 31 21 C 47.57 21 61 16.52 61 11"/>
    </g>
  `,
  "dotted-line": `<path stroke="currentColor" fill="none" stroke-width="8.5" stroke-dasharray="8.5" d="M20.85 50h58.5"/>`,
  "short-dashed-line": `<path stroke="currentColor" fill="none" stroke-width="8.5" stroke-dasharray="10" d="M20.85 50h58.5"/>`,
  "long-dashed-line": `<path stroke="currentColor" fill="none" stroke-width="8.5" stroke-dasharray="20" d="M20.85 50h58.5"/>`
};
var IconsHelper = class {
  static addIcons() {
    for (const [id, svg] of Object.entries(CUSTOM_ICONS)) {
      (0, import_obsidian6.addIcon)(id, svg);
    }
  }
};

// src/canvas-extensions/stickers-canvas-extension.ts
var IMAGE_FILE_EXTENSIONS = ["bmp", "png", "jpg", "jpeg", "gif", "svg", "webp", "avif"];
var StickersCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    if (!this.plugin.settingsManager.getSetting("stickersFeatureEnabled"))
      return;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.PopupMenuCreated,
      (canvas) => this.onPopupMenuCreated(canvas)
    ));
  }
  onPopupMenuCreated(canvas) {
    if (canvas.readonly || !this.hasValidNodeInSelection(canvas))
      return;
    addPopupMenuOption(
      canvas,
      createPopupMenuOption({
        id: "sticker-option",
        label: "Toggle sticker",
        icon: "badge",
        callback: () => this.toggleStickerForSelection(canvas)
      })
    );
  }
  hasValidNodeInSelection(canvas) {
    var _a, _b;
    const selectedNodesData = canvas.getSelectionData().nodes;
    for (const nodeData of selectedNodesData) {
      if (nodeData.type !== "file")
        continue;
      const nodeFileExtension = (_b = (_a = nodeData.file) == null ? void 0 : _a.split(".").pop()) == null ? void 0 : _b.toLowerCase();
      if (!nodeFileExtension)
        continue;
      if (!IMAGE_FILE_EXTENSIONS.includes(nodeFileExtension))
        continue;
      return true;
    }
    return false;
  }
  toggleStickerForSelection(canvas) {
    const selectedNodesData = canvas.getSelectionData().nodes;
    for (const nodeData of selectedNodesData) {
      if (nodeData.type !== "file")
        continue;
      const node = canvas.nodes.get(nodeData.id);
      if (!node)
        continue;
      const wasSticker = node.getData().isSticker;
      canvas.setNodeData(node, "isSticker", wasSticker ? void 0 : true);
    }
  }
};

// src/utils/a-star-helper.ts
var DIRECTIONS2 = [
  { dx: 1, dy: 0 },
  { dx: -1, dy: 0 },
  { dx: 0, dy: 1 },
  { dx: 0, dy: -1 },
  { dx: 1, dy: 1 },
  { dx: -1, dy: 1 },
  { dx: 1, dy: -1 },
  { dx: -1, dy: -1 }
];
var DIAGONAL_COST = Math.sqrt(2);
var Node = class {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.gCost = 0;
    this.hCost = 0;
    this.fCost = 0;
    this.parent = null;
  }
  // Only check for x and y, not gCost, hCost, fCost, or parent
  inList(nodes) {
    return nodes.some((n) => n.x === this.x && n.y === this.y);
  }
};
function heuristic(node, end) {
  return Math.abs(node.x - end.x) + Math.abs(node.y - end.y);
}
function isTouchingObstacle(node, obstacles) {
  return obstacles.some((obstacle) => insideBBox(node, obstacle, true));
}
function isInsideObstacle(node, obstacles) {
  return obstacles.some((obstacle) => insideBBox(node, obstacle, false));
}
function getMovementCost(direction) {
  return direction.dx !== 0 && direction.dy !== 0 ? DIAGONAL_COST : 1;
}
function getPossibleNeighbors(node, obstacles, gridResolution) {
  const neighbors = [];
  for (const direction of DIRECTIONS2) {
    const neighbor = new Node(
      node.x + direction.dx * gridResolution,
      node.y + direction.dy * gridResolution
    );
    neighbor.gCost = node.gCost + getMovementCost(direction);
    if (isInsideObstacle(neighbor, obstacles))
      continue;
    neighbors.push(neighbor);
  }
  return neighbors;
}
function reconstructPath(node) {
  const path = [];
  while (node) {
    path.push(node);
    node = node.parent;
  }
  return path.reverse();
}
function aStar(fromPos, fromSide, toPos, toSide, obstacles, gridResolution) {
  const start = new Node(
    Math.floor(fromPos.x / gridResolution) * gridResolution,
    Math.floor(fromPos.y / gridResolution) * gridResolution
  );
  if (fromSide === "right" && fromPos.x !== start.x)
    start.x += gridResolution;
  if (fromSide === "bottom" && fromPos.y !== start.y)
    start.y += gridResolution;
  const end = new Node(
    Math.floor(toPos.x / gridResolution) * gridResolution,
    Math.floor(toPos.y / gridResolution) * gridResolution
  );
  if (toSide === "right" && toPos.x !== end.x)
    end.x += gridResolution;
  if (toSide === "bottom" && toPos.y !== end.y)
    end.y += gridResolution;
  if (isInsideObstacle(start, obstacles) || isInsideObstacle(end, obstacles))
    return null;
  const openSet = [start];
  const closedSet = [];
  while (openSet.length > 0) {
    let current = null;
    let lowestFCost = Infinity;
    for (const node of openSet) {
      if (node.fCost < lowestFCost) {
        current = node;
        lowestFCost = node.fCost;
      }
    }
    if (!current)
      return null;
    openSet.splice(openSet.indexOf(current), 1);
    closedSet.push(current);
    if (current.x === end.x && current.y === end.y) {
      return [fromPos, ...reconstructPath(current), toPos].map((node) => ({ x: node.x, y: node.y }));
    }
    if (!(current.x === start.x && current.y === start.y) && isTouchingObstacle(current, obstacles))
      continue;
    for (const neighbor of getPossibleNeighbors(current, obstacles, gridResolution)) {
      if (neighbor.inList(closedSet))
        continue;
      const tentativeGCost = current.gCost + getMovementCost({
        dx: neighbor.x - current.x,
        dy: neighbor.y - current.y
      });
      if (!neighbor.inList(openSet) || tentativeGCost < neighbor.gCost) {
        neighbor.parent = current;
        neighbor.gCost = tentativeGCost;
        neighbor.hCost = heuristic(neighbor, end);
        neighbor.fCost = neighbor.gCost + neighbor.hCost;
        openSet.push(neighbor);
      }
    }
  }
  return null;
}

// src/utils/svg-path-helper.ts
function pathArrayToSvgPath(positions, rounded = false) {
  const tension = 0.2;
  let newPositions = [...positions];
  if (rounded && positions.length > 2) {
    newPositions = [positions[0]];
    for (let i = 1; i < positions.length - 2; i++) {
      const p1 = positions[i];
      const p2 = positions[i + 1];
      const p3 = positions[i + 2];
      const t1 = (1 - tension) / 2;
      const t2 = 1 - t1;
      const x = t2 * t2 * t2 * p1.x + 3 * t2 * t2 * t1 * p2.x + 3 * t2 * t1 * t1 * p3.x + t1 * t1 * t1 * p2.x;
      const y = t2 * t2 * t2 * p1.y + 3 * t2 * t2 * t1 * p2.y + 3 * t2 * t1 * t1 * p3.y + t1 * t1 * t1 * p2.y;
      newPositions.push({ x, y });
    }
    const lastPoint = positions[positions.length - 1];
    newPositions.push(lastPoint);
  }
  for (let i = 0; i < newPositions.length - 2; i++) {
    const p1 = newPositions[i];
    const p2 = newPositions[i + 1];
    const p3 = newPositions[i + 2];
    const currentDirection = {
      x: p2.x - p1.x,
      y: p2.y - p1.y
    };
    const nextDirection = {
      x: p3.x - p2.x,
      y: p3.y - p2.y
    };
    if (currentDirection.x !== nextDirection.x && currentDirection.y !== nextDirection.y)
      continue;
    newPositions.splice(i + 1, 1);
    i--;
  }
  return newPositions.map(
    (position, index) => `${index === 0 ? "M" : "L"} ${position.x} ${position.y}`
  ).join(" ");
}

// src/canvas-extensions/edges-style-canvas-extension.ts
var STYLES_MENU_OPTIONS = [
  {
    id: void 0,
    label: "Default",
    icon: "minus"
  },
  {
    id: "long-dashed",
    label: "Dashed (long)",
    icon: "long-dashed-line"
  },
  {
    id: "short-dashed",
    label: "Dashed",
    icon: "short-dashed-line"
  },
  {
    id: "dotted",
    label: "Dotted",
    icon: "dotted-line"
  }
];
var ROUTES_MENU_OPTIONS = [
  {
    id: void 0,
    label: "Default",
    icon: "route"
  },
  {
    id: "direct",
    label: "Direct",
    icon: "minus"
  },
  {
    id: "a-star",
    label: "A*",
    icon: "navigation"
  }
];
var EdgesStyleCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    if (!this.plugin.settingsManager.getSetting("edgesStylingFeatureEnabled"))
      return;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.PopupMenuCreated,
      (canvas) => this.onPopupMenuCreated(canvas)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.EdgeChanged,
      (canvas, edge) => this.onEdgeChanged(canvas, edge)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.EdgeCenterRequested,
      (canvas, edge, center) => this.onEdgeCenterRequested(canvas, edge, center)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeAdded,
      (canvas, _node) => this.updateAllEdges(canvas)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeRemoved,
      (canvas, _node) => this.updateAllEdges(canvas)
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.DraggingStateChanged,
      (canvas, isDragging) => {
        if (!isDragging)
          this.updateAllEdges(canvas);
      }
    ));
  }
  onPopupMenuCreated(canvas) {
    const selectedEdges = [...canvas.selection].filter((item) => item.path !== void 0);
    if (canvas.readonly || selectedEdges.length === 0)
      return;
    const pathStyleNestedOptions = STYLES_MENU_OPTIONS.map((style) => ({
      ...style,
      id: void 0,
      callback: () => this.setStyleForSelection(canvas, selectedEdges, style.id)
    }));
    const pathStyleMenuOption = createExpandablePopupMenuOption({
      id: "edge-style-option",
      label: "Edge style",
      icon: "minus"
    }, pathStyleNestedOptions);
    addPopupMenuOption(canvas, pathStyleMenuOption, -2);
    const pathRouteNestedOptions = ROUTES_MENU_OPTIONS.map((route) => ({
      ...route,
      id: void 0,
      callback: () => this.setPathRouteForSelection(canvas, selectedEdges, route.id)
    }));
    const pathRouteMenuOption = createExpandablePopupMenuOption({
      id: "edge-path-route-option",
      label: "Edge path route",
      icon: "route"
    }, pathRouteNestedOptions);
    addPopupMenuOption(canvas, pathRouteMenuOption, -2);
  }
  setStyleForSelection(canvas, selectedEdges, styleId) {
    for (const edge of selectedEdges) {
      canvas.setEdgeData(edge, "edgeStyle", styleId);
    }
  }
  setPathRouteForSelection(canvas, selectedEdges, pathRouteTypeId) {
    for (const edge of selectedEdges) {
      canvas.setEdgeData(edge, "edgePathRoute", pathRouteTypeId);
    }
  }
  updateAllEdges(canvas) {
    for (const edge of canvas.edges.values()) {
      this.onEdgeChanged(canvas, edge);
    }
  }
  onEdgeChanged(canvas, edge) {
    var _a, _b, _c;
    if (!edge.bezier)
      return;
    edge.updatePath();
    edge.center = void 0;
    const pathRouteType = (_a = edge.getData().edgePathRoute) != null ? _a : "default";
    if (pathRouteType === "default") {
      (_b = edge.labelElement) == null ? void 0 : _b.render();
      return;
    }
    const fromPos = edge.from.end === "none" ? getCenterOfBBoxSide(edge.from.node.getBBox(), edge.from.side) : edge.bezier.from;
    const toPos = edge.to.end === "none" ? getCenterOfBBoxSide(edge.to.node.getBBox(), edge.to.side) : edge.bezier.to;
    let newPath = edge.path.display.getAttribute("d");
    if (pathRouteType === "direct") {
      newPath = pathArrayToSvgPath([fromPos, toPos], false);
      edge.center = {
        x: (fromPos.x + toPos.x) / 2,
        y: (fromPos.y + toPos.y) / 2
      };
    } else if (pathRouteType === "a-star") {
      if (canvas.isDragging && !this.plugin.settingsManager.getSetting("edgeStylePathfinderPathLiveUpdate"))
        return;
      const nodeBBoxes = [...canvas.nodes.values()].filter((node) => {
        const nodeData = node.getData();
        const isGroup = nodeData.type === "group";
        const isOpenPortal = nodeData.portalToFile !== void 0;
        return !isGroup && !isOpenPortal;
      }).map((node) => node.getBBox());
      const gridResolution = this.plugin.settingsManager.getSetting("edgeStylePathfinderGridResolution");
      const pathArray = aStar(fromPos, edge.from.side, toPos, edge.to.side, nodeBBoxes, gridResolution);
      if (!pathArray)
        return;
      const roundedPath = this.plugin.settingsManager.getSetting("edgeStylePathfinderPathRounded");
      const svgPath = pathArrayToSvgPath(pathArray, roundedPath);
      newPath = svgPath;
      edge.center = pathArray[Math.floor(pathArray.length / 2)];
    }
    edge.path.interaction.setAttr("d", newPath);
    edge.path.display.setAttr("d", newPath);
    (_c = edge.labelElement) == null ? void 0 : _c.render();
  }
  onEdgeCenterRequested(_canvas, edge, center) {
    var _a, _b, _c, _d;
    center.x = (_b = (_a = edge.center) == null ? void 0 : _a.x) != null ? _b : center.x;
    center.y = (_d = (_c = edge.center) == null ? void 0 : _c.y) != null ? _d : center.y;
  }
};

// src/canvas-extensions/edge-data-tagger-canvas-extension.ts
function getExposedEdgeData(settings) {
  const exposedData = [];
  if (settings.getSetting("edgesStylingFeatureEnabled"))
    exposedData.push("edgeStyle");
  if (settings.getSetting("portalsFeatureEnabled"))
    exposedData.push("isUnsaved");
  return exposedData;
}
var EdgeDataTaggerCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.EdgeChanged,
      (_canvas, edge) => {
        const edgeData = edge == null ? void 0 : edge.getData();
        if (!edgeData)
          return;
        for (const dataKey of getExposedEdgeData(this.plugin.settingsManager)) {
          const dataValue = edgeData[dataKey];
          if (dataValue === void 0)
            delete edge.path.display.dataset[dataKey];
          else
            edge.path.display.dataset[dataKey] = dataValue;
        }
      }
    ));
  }
};

// src/utils/debug-helper.ts
var DebugHelper = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeAdded,
      (_canvas, _node) => console.log("\u{1F7E2} NodeAdded")
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.NodeChanged,
      (_canvas, _node) => console.log("\u{1F7E1} NodeChanged")
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.EdgeAdded,
      (_canvas, _edge) => console.log("\u{1F7E2} EdgeAdded")
    ));
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.EdgeChanged,
      (_canvas, _edge) => console.log("\u{1F7E1} EdgeChanged")
    ));
  }
};

// src/canvas-extensions/default-node-size-canvas-extension.ts
var DefaultNodeSizeCanvasExtension = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.plugin.registerEvent(this.plugin.app.workspace.on(
      CanvasEvent.CanvasChanged,
      (canvas) => canvas.config.defaultTextNodeDimensions = { width: 260, height: 60 }
    ));
  }
};

// src/main.ts
var CANVAS_EXTENSIONS = [
  NodeDataTaggerCanvasExtension,
  EdgeDataTaggerCanvasExtension,
  InteractionTaggerCanvasExtension,
  DefaultNodeSizeCanvasExtension,
  CommandsCanvasExtension,
  ReadonlyCanvasExtension,
  GroupCanvasExtension,
  EncapsulateCanvasExtension,
  StickersCanvasExtension,
  ShapesCanvasExtension,
  EdgesStyleCanvasExtension,
  PresentationCanvasExtension,
  PortalsCanvasExtension
];
var AdvancedCanvasPlugin = class extends import_obsidian7.Plugin {
  async onload() {
    IconsHelper.addIcons();
    this.settingsManager = new AdvancedCanvasSettingsManager(this);
    await this.settingsManager.loadSettings();
    this.settingsManager.addSettingsTab();
    this.canvasEventEmitter = new CanvasEventEmitter(this);
    this.canvasExtensions = CANVAS_EXTENSIONS.map((Extension) => new Extension(this));
  }
  onunload() {
  }
  getCurrentCanvasView() {
    const canvasView = this.app.workspace.getActiveViewOfType(import_obsidian7.ItemView);
    if ((canvasView == null ? void 0 : canvasView.getViewType()) !== "canvas")
      return null;
    return canvasView;
  }
  getCurrentCanvas() {
    var _a;
    return ((_a = this.getCurrentCanvasView()) == null ? void 0 : _a.canvas) || null;
  }
  // this.app.plugins.plugins["advanced-canvas"].enableDebugMode()
  enableDebugMode() {
    if (this.debugHelper)
      return;
    this.debugHelper = new DebugHelper(this);
  }
};
//# sourceMappingURL=data:application/json;base64,
